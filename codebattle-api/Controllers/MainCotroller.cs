using codebattle_api.DTO;
using codebattle_api.Services;
using Microsoft.AspNetCore.Mvc;

namespace codebattle_api.Controllers
{
    /// <summary>
    /// Main Controller for all the entities
    /// </summary>
    /// <typeparam name="IService"></typeparam>
    /// <typeparam name="PostDTO"></typeparam>
    /// <typeparam name="DetailDTO"></typeparam>
    public abstract class MainController<IService, PostDTO, DetailDTO> : ControllerBase where PostDTO : BaseDTO where DetailDTO : BaseDTO where IService : IMainService<PostDTO, DetailDTO>
    {
        #region Builder & Properties
        protected readonly IService _service;
        public MainController(IService service)
        {
            _service = service;
        }
        #endregion Builder & Properties

        /// <summary>
        /// (Autogenerated) Returns a desired entity based on its Database Id
        /// </summary>
        /// <param name="id">Database Id of the desired Entity</param>
        /// <returns>Detail DTO of the desired Entity</returns>
        [HttpGet("{id}")]
        public async Task<DetailDTO> Get(int id)
        {
            return await _service.GetById(id);
        }

        /// <summary>
        /// (Autogenerated) Returns a full list of desired entity
        /// </summary>
        /// <returns>List of Detail DTOs</returns>
        [HttpGet("")]
        public async Task<IEnumerable<DetailDTO>> List()
        {
            return await _service.GetList();
        }

        /// <summary>
        /// (Autogenerated) Edits a desired Entity based on its Database Id
        /// </summary>
        /// <param name="id">Database Id of the desired Entity</param>
        /// <param name="postDto">New Content of the Entity</param>
        /// <returns>DTO of the edited entity</returns>
        [HttpPut("{id}")]
        public async Task<PostDTO> Update(int id, [FromBody] PostDTO postDto)
        {
            postDto.Id = id;
            return await _service.EditById(postDto);
        }

        /// <summary>
        /// (Autogenerated) Creates a new Entity
        /// </summary>
        /// <param name="postDTO">New Entity content</param>
        /// <returns>DTO of the new Entity</returns>
        [HttpPost("")]
        public async Task<PostDTO> Create([FromBody] PostDTO postDTO)
        {
            return await _service.Add(postDTO);
        }

        /// <summary>
        /// (Autogenerated) Deletes a desired Entity by its Database Id
        /// </summary>
        /// <param name="id">Database Id of the desired Entity</param>
        /// <param name="isDbDelete">Defines if the delete is going to be logical or physical</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        public async Task<bool> Delete(int id, [FromBody] bool isDbDelete = false)
        {
            return await _service.DeleteById(id, isDbDelete);
        }

    }
}